/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 542.0, "minX": 0.0, "maxY": 31909.0, "series": [{"data": [[0.0, 542.0], [0.1, 707.0], [0.2, 709.0], [0.3, 723.0], [0.4, 898.0], [0.5, 907.0], [0.6, 1089.0], [0.7, 1097.0], [0.8, 1135.0], [0.9, 1162.0], [1.0, 1174.0], [1.1, 1211.0], [1.2, 1220.0], [1.3, 1243.0], [1.4, 1313.0], [1.5, 1325.0], [1.6, 1330.0], [1.7, 1346.0], [1.8, 1348.0], [1.9, 1349.0], [2.0, 1359.0], [2.1, 1380.0], [2.2, 1386.0], [2.3, 1387.0], [2.4, 1457.0], [2.5, 1485.0], [2.6, 1540.0], [2.7, 1552.0], [2.8, 1554.0], [2.9, 1568.0], [3.0, 1580.0], [3.1, 1587.0], [3.2, 1593.0], [3.3, 1602.0], [3.4, 1644.0], [3.5, 1654.0], [3.6, 1661.0], [3.7, 1704.0], [3.8, 1714.0], [3.9, 1728.0], [4.0, 1744.0], [4.1, 1749.0], [4.2, 1754.0], [4.3, 1817.0], [4.4, 1826.0], [4.5, 1854.0], [4.6, 1868.0], [4.7, 1868.0], [4.8, 1900.0], [4.9, 1903.0], [5.0, 1916.0], [5.1, 1938.0], [5.2, 1955.0], [5.3, 1957.0], [5.4, 1993.0], [5.5, 2029.0], [5.6, 2040.0], [5.7, 2082.0], [5.8, 2102.0], [5.9, 2109.0], [6.0, 2143.0], [6.1, 2158.0], [6.2, 2166.0], [6.3, 2173.0], [6.4, 2199.0], [6.5, 2205.0], [6.6, 2244.0], [6.7, 2288.0], [6.8, 2312.0], [6.9, 2421.0], [7.0, 2436.0], [7.1, 2479.0], [7.2, 2483.0], [7.3, 2507.0], [7.4, 2551.0], [7.5, 2669.0], [7.6, 2710.0], [7.7, 2856.0], [7.8, 2878.0], [7.9, 2935.0], [8.0, 2949.0], [8.1, 2966.0], [8.2, 2972.0], [8.3, 2973.0], [8.4, 2979.0], [8.5, 2981.0], [8.6, 3014.0], [8.7, 3030.0], [8.8, 3038.0], [8.9, 3052.0], [9.0, 3118.0], [9.1, 3120.0], [9.2, 3137.0], [9.3, 3178.0], [9.4, 3178.0], [9.5, 3196.0], [9.6, 3223.0], [9.7, 3322.0], [9.8, 3337.0], [9.9, 3338.0], [10.0, 3717.0], [10.1, 4183.0], [10.2, 4389.0], [10.3, 4399.0], [10.4, 4409.0], [10.5, 4449.0], [10.6, 4480.0], [10.7, 4517.0], [10.8, 4521.0], [10.9, 4559.0], [11.0, 4593.0], [11.1, 4597.0], [11.2, 4646.0], [11.3, 4687.0], [11.4, 4726.0], [11.5, 4760.0], [11.6, 4810.0], [11.7, 4824.0], [11.8, 4826.0], [11.9, 4882.0], [12.0, 4941.0], [12.1, 4992.0], [12.2, 5027.0], [12.3, 5028.0], [12.4, 5077.0], [12.5, 5137.0], [12.6, 5160.0], [12.7, 5172.0], [12.8, 5215.0], [12.9, 5251.0], [13.0, 5255.0], [13.1, 5257.0], [13.2, 5270.0], [13.3, 5271.0], [13.4, 5288.0], [13.5, 5289.0], [13.6, 5292.0], [13.7, 5313.0], [13.8, 5319.0], [13.9, 5323.0], [14.0, 5359.0], [14.1, 5359.0], [14.2, 5426.0], [14.3, 5453.0], [14.4, 5458.0], [14.5, 5459.0], [14.6, 5460.0], [14.7, 5461.0], [14.8, 5469.0], [14.9, 5490.0], [15.0, 5492.0], [15.1, 5531.0], [15.2, 5607.0], [15.3, 5618.0], [15.4, 5630.0], [15.5, 5644.0], [15.6, 5653.0], [15.7, 5666.0], [15.8, 5701.0], [15.9, 5707.0], [16.0, 5719.0], [16.1, 5778.0], [16.2, 5789.0], [16.3, 5791.0], [16.4, 5806.0], [16.5, 5808.0], [16.6, 5855.0], [16.7, 5861.0], [16.8, 5867.0], [16.9, 5922.0], [17.0, 5937.0], [17.1, 5967.0], [17.2, 6195.0], [17.3, 6353.0], [17.4, 6473.0], [17.5, 6495.0], [17.6, 6508.0], [17.7, 6510.0], [17.8, 6536.0], [17.9, 6626.0], [18.0, 6739.0], [18.1, 6783.0], [18.2, 6789.0], [18.3, 6826.0], [18.4, 6827.0], [18.5, 6829.0], [18.6, 6848.0], [18.7, 6910.0], [18.8, 6938.0], [18.9, 6948.0], [19.0, 6980.0], [19.1, 7187.0], [19.2, 7325.0], [19.3, 7358.0], [19.4, 7397.0], [19.5, 7410.0], [19.6, 7429.0], [19.7, 7444.0], [19.8, 7556.0], [19.9, 7593.0], [20.0, 7654.0], [20.1, 7661.0], [20.2, 7673.0], [20.3, 7744.0], [20.4, 7833.0], [20.5, 7907.0], [20.6, 7970.0], [20.7, 8024.0], [20.8, 8048.0], [20.9, 8078.0], [21.0, 8129.0], [21.1, 8226.0], [21.2, 8235.0], [21.3, 8260.0], [21.4, 8261.0], [21.5, 8262.0], [21.6, 8285.0], [21.7, 8326.0], [21.8, 8326.0], [21.9, 8373.0], [22.0, 8376.0], [22.1, 8397.0], [22.2, 8416.0], [22.3, 8426.0], [22.4, 8446.0], [22.5, 8477.0], [22.6, 8494.0], [22.7, 8507.0], [22.8, 8610.0], [22.9, 8633.0], [23.0, 8660.0], [23.1, 8674.0], [23.2, 8770.0], [23.3, 8809.0], [23.4, 8832.0], [23.5, 8841.0], [23.6, 8851.0], [23.7, 8897.0], [23.8, 8925.0], [23.9, 8926.0], [24.0, 8996.0], [24.1, 9061.0], [24.2, 9136.0], [24.3, 9167.0], [24.4, 9192.0], [24.5, 9263.0], [24.6, 9296.0], [24.7, 9376.0], [24.8, 9389.0], [24.9, 9409.0], [25.0, 9476.0], [25.1, 9537.0], [25.2, 9558.0], [25.3, 9589.0], [25.4, 9611.0], [25.5, 9626.0], [25.6, 9629.0], [25.7, 9662.0], [25.8, 9685.0], [25.9, 9708.0], [26.0, 9714.0], [26.1, 9730.0], [26.2, 9741.0], [26.3, 9780.0], [26.4, 9810.0], [26.5, 9823.0], [26.6, 9839.0], [26.7, 9840.0], [26.8, 9891.0], [26.9, 9919.0], [27.0, 9930.0], [27.1, 9933.0], [27.2, 9937.0], [27.3, 9980.0], [27.4, 9981.0], [27.5, 9988.0], [27.6, 10046.0], [27.7, 10049.0], [27.8, 10071.0], [27.9, 10093.0], [28.0, 10095.0], [28.1, 10103.0], [28.2, 10131.0], [28.3, 10167.0], [28.4, 10184.0], [28.5, 10188.0], [28.6, 10198.0], [28.7, 10207.0], [28.8, 10215.0], [28.9, 10225.0], [29.0, 10241.0], [29.1, 10256.0], [29.2, 10257.0], [29.3, 10261.0], [29.4, 10316.0], [29.5, 10335.0], [29.6, 10351.0], [29.7, 10357.0], [29.8, 10376.0], [29.9, 10385.0], [30.0, 10409.0], [30.1, 10413.0], [30.2, 10427.0], [30.3, 10430.0], [30.4, 10434.0], [30.5, 10451.0], [30.6, 10469.0], [30.7, 10472.0], [30.8, 10476.0], [30.9, 10481.0], [31.0, 10527.0], [31.1, 10537.0], [31.2, 10581.0], [31.3, 10587.0], [31.4, 10631.0], [31.5, 10647.0], [31.6, 10691.0], [31.7, 10707.0], [31.8, 10708.0], [31.9, 10716.0], [32.0, 10720.0], [32.1, 10721.0], [32.2, 10733.0], [32.3, 10757.0], [32.4, 10766.0], [32.5, 10766.0], [32.6, 10769.0], [32.7, 10820.0], [32.8, 10825.0], [32.9, 10832.0], [33.0, 10846.0], [33.1, 10870.0], [33.2, 10881.0], [33.3, 10949.0], [33.4, 10965.0], [33.5, 10973.0], [33.6, 10999.0], [33.7, 11015.0], [33.8, 11038.0], [33.9, 11059.0], [34.0, 11065.0], [34.1, 11069.0], [34.2, 11085.0], [34.3, 11092.0], [34.4, 11100.0], [34.5, 11131.0], [34.6, 11131.0], [34.7, 11137.0], [34.8, 11152.0], [34.9, 11184.0], [35.0, 11214.0], [35.1, 11215.0], [35.2, 11265.0], [35.3, 11267.0], [35.4, 11292.0], [35.5, 11315.0], [35.6, 11331.0], [35.7, 11358.0], [35.8, 11387.0], [35.9, 11405.0], [36.0, 11408.0], [36.1, 11427.0], [36.2, 11427.0], [36.3, 11495.0], [36.4, 11498.0], [36.5, 11502.0], [36.6, 11556.0], [36.7, 11559.0], [36.8, 11559.0], [36.9, 11567.0], [37.0, 11582.0], [37.1, 11585.0], [37.2, 11592.0], [37.3, 11640.0], [37.4, 11665.0], [37.5, 11688.0], [37.6, 11706.0], [37.7, 11726.0], [37.8, 11731.0], [37.9, 11752.0], [38.0, 11760.0], [38.1, 11772.0], [38.2, 11808.0], [38.3, 11825.0], [38.4, 11846.0], [38.5, 11875.0], [38.6, 11882.0], [38.7, 11890.0], [38.8, 11913.0], [38.9, 11918.0], [39.0, 11958.0], [39.1, 11977.0], [39.2, 11981.0], [39.3, 11988.0], [39.4, 12022.0], [39.5, 12044.0], [39.6, 12067.0], [39.7, 12093.0], [39.8, 12117.0], [39.9, 12121.0], [40.0, 12127.0], [40.1, 12135.0], [40.2, 12142.0], [40.3, 12162.0], [40.4, 12190.0], [40.5, 12240.0], [40.6, 12257.0], [40.7, 12260.0], [40.8, 12263.0], [40.9, 12274.0], [41.0, 12301.0], [41.1, 12327.0], [41.2, 12343.0], [41.3, 12344.0], [41.4, 12350.0], [41.5, 12351.0], [41.6, 12364.0], [41.7, 12367.0], [41.8, 12373.0], [41.9, 12375.0], [42.0, 12405.0], [42.1, 12407.0], [42.2, 12428.0], [42.3, 12508.0], [42.4, 12550.0], [42.5, 12557.0], [42.6, 12562.0], [42.7, 12585.0], [42.8, 12587.0], [42.9, 12619.0], [43.0, 12644.0], [43.1, 12657.0], [43.2, 12665.0], [43.3, 12684.0], [43.4, 12701.0], [43.5, 12702.0], [43.6, 12737.0], [43.7, 12759.0], [43.8, 12782.0], [43.9, 12898.0], [44.0, 12925.0], [44.1, 12957.0], [44.2, 12985.0], [44.3, 12997.0], [44.4, 13222.0], [44.5, 13233.0], [44.6, 13262.0], [44.7, 13278.0], [44.8, 13296.0], [44.9, 13345.0], [45.0, 13365.0], [45.1, 13403.0], [45.2, 13443.0], [45.3, 13454.0], [45.4, 13473.0], [45.5, 13489.0], [45.6, 13504.0], [45.7, 13545.0], [45.8, 13550.0], [45.9, 13593.0], [46.0, 13653.0], [46.1, 13705.0], [46.2, 13745.0], [46.3, 13792.0], [46.4, 13814.0], [46.5, 13820.0], [46.6, 13836.0], [46.7, 13848.0], [46.8, 13874.0], [46.9, 13882.0], [47.0, 13884.0], [47.1, 13896.0], [47.2, 13908.0], [47.3, 13912.0], [47.4, 13918.0], [47.5, 13921.0], [47.6, 13933.0], [47.7, 13952.0], [47.8, 13984.0], [47.9, 14217.0], [48.0, 14222.0], [48.1, 14261.0], [48.2, 14265.0], [48.3, 14276.0], [48.4, 14284.0], [48.5, 14295.0], [48.6, 14391.0], [48.7, 14402.0], [48.8, 14506.0], [48.9, 14540.0], [49.0, 14630.0], [49.1, 14660.0], [49.2, 14817.0], [49.3, 14973.0], [49.4, 14975.0], [49.5, 14987.0], [49.6, 15020.0], [49.7, 15075.0], [49.8, 15083.0], [49.9, 15101.0], [50.0, 15112.0], [50.1, 15144.0], [50.2, 15175.0], [50.3, 15268.0], [50.4, 15304.0], [50.5, 15320.0], [50.6, 15335.0], [50.7, 15349.0], [50.8, 15351.0], [50.9, 15486.0], [51.0, 15528.0], [51.1, 15557.0], [51.2, 15581.0], [51.3, 15629.0], [51.4, 15642.0], [51.5, 15653.0], [51.6, 15669.0], [51.7, 15685.0], [51.8, 15688.0], [51.9, 15690.0], [52.0, 15691.0], [52.1, 15735.0], [52.2, 15767.0], [52.3, 15768.0], [52.4, 15858.0], [52.5, 15883.0], [52.6, 15909.0], [52.7, 15915.0], [52.8, 15940.0], [52.9, 15968.0], [53.0, 15981.0], [53.1, 16005.0], [53.2, 16212.0], [53.3, 16214.0], [53.4, 16241.0], [53.5, 16374.0], [53.6, 16522.0], [53.7, 16667.0], [53.8, 16674.0], [53.9, 16687.0], [54.0, 16695.0], [54.1, 16709.0], [54.2, 16740.0], [54.3, 16747.0], [54.4, 16867.0], [54.5, 16868.0], [54.6, 16874.0], [54.7, 17012.0], [54.8, 17021.0], [54.9, 17025.0], [55.0, 17049.0], [55.1, 17098.0], [55.2, 17102.0], [55.3, 17170.0], [55.4, 17266.0], [55.5, 17266.0], [55.6, 17353.0], [55.7, 17428.0], [55.8, 17435.0], [55.9, 17511.0], [56.0, 17568.0], [56.1, 17590.0], [56.2, 17620.0], [56.3, 17661.0], [56.4, 17693.0], [56.5, 17729.0], [56.6, 17735.0], [56.7, 17753.0], [56.8, 17774.0], [56.9, 17778.0], [57.0, 17793.0], [57.1, 17851.0], [57.2, 17904.0], [57.3, 17953.0], [57.4, 17961.0], [57.5, 17990.0], [57.6, 18033.0], [57.7, 18036.0], [57.8, 18041.0], [57.9, 18060.0], [58.0, 18067.0], [58.1, 18088.0], [58.2, 18100.0], [58.3, 18111.0], [58.4, 18114.0], [58.5, 18136.0], [58.6, 18160.0], [58.7, 18201.0], [58.8, 18259.0], [58.9, 18363.0], [59.0, 18375.0], [59.1, 18398.0], [59.2, 18409.0], [59.3, 18434.0], [59.4, 18473.0], [59.5, 18518.0], [59.6, 18522.0], [59.7, 18522.0], [59.8, 18576.0], [59.9, 18578.0], [60.0, 18690.0], [60.1, 18700.0], [60.2, 18710.0], [60.3, 18738.0], [60.4, 18749.0], [60.5, 18758.0], [60.6, 18780.0], [60.7, 18800.0], [60.8, 18865.0], [60.9, 18868.0], [61.0, 18901.0], [61.1, 18998.0], [61.2, 19015.0], [61.3, 19017.0], [61.4, 19068.0], [61.5, 19114.0], [61.6, 19156.0], [61.7, 19184.0], [61.8, 19198.0], [61.9, 19203.0], [62.0, 19235.0], [62.1, 19246.0], [62.2, 19345.0], [62.3, 19467.0], [62.4, 19470.0], [62.5, 19487.0], [62.6, 19501.0], [62.7, 19548.0], [62.8, 19561.0], [62.9, 19599.0], [63.0, 19608.0], [63.1, 19613.0], [63.2, 19619.0], [63.3, 19670.0], [63.4, 19691.0], [63.5, 19705.0], [63.6, 19705.0], [63.7, 19729.0], [63.8, 19751.0], [63.9, 19774.0], [64.0, 19776.0], [64.1, 19783.0], [64.2, 19826.0], [64.3, 19838.0], [64.4, 19854.0], [64.5, 19869.0], [64.6, 19878.0], [64.7, 19912.0], [64.8, 19967.0], [64.9, 19988.0], [65.0, 19994.0], [65.1, 20001.0], [65.2, 20052.0], [65.3, 20072.0], [65.4, 20109.0], [65.5, 20132.0], [65.6, 20150.0], [65.7, 20160.0], [65.8, 20208.0], [65.9, 20261.0], [66.0, 20271.0], [66.1, 20271.0], [66.2, 20284.0], [66.3, 20314.0], [66.4, 20329.0], [66.5, 20367.0], [66.6, 20383.0], [66.7, 20397.0], [66.8, 20408.0], [66.9, 20421.0], [67.0, 20444.0], [67.1, 20449.0], [67.2, 20450.0], [67.3, 20450.0], [67.4, 20458.0], [67.5, 20511.0], [67.6, 20513.0], [67.7, 20519.0], [67.8, 20521.0], [67.9, 20544.0], [68.0, 20554.0], [68.1, 20576.0], [68.2, 20653.0], [68.3, 20664.0], [68.4, 20674.0], [68.5, 20694.0], [68.6, 20701.0], [68.7, 20726.0], [68.8, 20753.0], [68.9, 20759.0], [69.0, 20769.0], [69.1, 20786.0], [69.2, 20789.0], [69.3, 20835.0], [69.4, 20852.0], [69.5, 20856.0], [69.6, 20858.0], [69.7, 20886.0], [69.8, 20925.0], [69.9, 20933.0], [70.0, 20947.0], [70.1, 21023.0], [70.2, 21053.0], [70.3, 21062.0], [70.4, 21075.0], [70.5, 21091.0], [70.6, 21107.0], [70.7, 21112.0], [70.8, 21116.0], [70.9, 21129.0], [71.0, 21142.0], [71.1, 21173.0], [71.2, 21173.0], [71.3, 21186.0], [71.4, 21193.0], [71.5, 21206.0], [71.6, 21255.0], [71.7, 21289.0], [71.8, 21354.0], [71.9, 21356.0], [72.0, 21374.0], [72.1, 21518.0], [72.2, 21551.0], [72.3, 21554.0], [72.4, 21567.0], [72.5, 21583.0], [72.6, 21588.0], [72.7, 21598.0], [72.8, 21615.0], [72.9, 21681.0], [73.0, 21682.0], [73.1, 21706.0], [73.2, 21758.0], [73.3, 21767.0], [73.4, 21807.0], [73.5, 21880.0], [73.6, 21887.0], [73.7, 21909.0], [73.8, 21932.0], [73.9, 21933.0], [74.0, 21951.0], [74.1, 21991.0], [74.2, 22030.0], [74.3, 22067.0], [74.4, 22076.0], [74.5, 22084.0], [74.6, 22095.0], [74.7, 22121.0], [74.8, 22131.0], [74.9, 22141.0], [75.0, 22180.0], [75.1, 22366.0], [75.2, 22382.0], [75.3, 22488.0], [75.4, 22492.0], [75.5, 22573.0], [75.6, 22620.0], [75.7, 22623.0], [75.8, 22648.0], [75.9, 22698.0], [76.0, 22707.0], [76.1, 22745.0], [76.2, 22755.0], [76.3, 22775.0], [76.4, 22840.0], [76.5, 22848.0], [76.6, 22853.0], [76.7, 22909.0], [76.8, 22971.0], [76.9, 22990.0], [77.0, 23132.0], [77.1, 23167.0], [77.2, 23233.0], [77.3, 23252.0], [77.4, 23280.0], [77.5, 23283.0], [77.6, 23309.0], [77.7, 23493.0], [77.8, 23645.0], [77.9, 23687.0], [78.0, 23758.0], [78.1, 23796.0], [78.2, 23949.0], [78.3, 23986.0], [78.4, 24033.0], [78.5, 24062.0], [78.6, 24154.0], [78.7, 24258.0], [78.8, 24262.0], [78.9, 24298.0], [79.0, 24318.0], [79.1, 24320.0], [79.2, 24396.0], [79.3, 24417.0], [79.4, 24440.0], [79.5, 24524.0], [79.6, 24566.0], [79.7, 24586.0], [79.8, 24587.0], [79.9, 24592.0], [80.0, 24621.0], [80.1, 24682.0], [80.2, 24778.0], [80.3, 24781.0], [80.4, 24813.0], [80.5, 24857.0], [80.6, 24920.0], [80.7, 24966.0], [80.8, 25003.0], [80.9, 25021.0], [81.0, 25024.0], [81.1, 25066.0], [81.2, 25086.0], [81.3, 25170.0], [81.4, 25236.0], [81.5, 25237.0], [81.6, 25367.0], [81.7, 25427.0], [81.8, 25460.0], [81.9, 25464.0], [82.0, 25516.0], [82.1, 25560.0], [82.2, 25614.0], [82.3, 25720.0], [82.4, 25812.0], [82.5, 25824.0], [82.6, 25870.0], [82.7, 25936.0], [82.8, 26014.0], [82.9, 26049.0], [83.0, 26081.0], [83.1, 26154.0], [83.2, 26253.0], [83.3, 26269.0], [83.4, 26337.0], [83.5, 26360.0], [83.6, 26373.0], [83.7, 26403.0], [83.8, 26458.0], [83.9, 26460.0], [84.0, 26473.0], [84.1, 26501.0], [84.2, 26610.0], [84.3, 26630.0], [84.4, 26675.0], [84.5, 26683.0], [84.6, 26695.0], [84.7, 26876.0], [84.8, 26891.0], [84.9, 26967.0], [85.0, 26978.0], [85.1, 27011.0], [85.2, 27079.0], [85.3, 27086.0], [85.4, 27090.0], [85.5, 27103.0], [85.6, 27352.0], [85.7, 27455.0], [85.8, 27465.0], [85.9, 27530.0], [86.0, 27531.0], [86.1, 27549.0], [86.2, 27738.0], [86.3, 27851.0], [86.4, 27884.0], [86.5, 27951.0], [86.6, 27967.0], [86.7, 28038.0], [86.8, 28059.0], [86.9, 28066.0], [87.0, 28095.0], [87.1, 28114.0], [87.2, 28143.0], [87.3, 28205.0], [87.4, 28229.0], [87.5, 28231.0], [87.6, 28272.0], [87.7, 28310.0], [87.8, 28327.0], [87.9, 28331.0], [88.0, 28337.0], [88.1, 28349.0], [88.2, 28379.0], [88.3, 28380.0], [88.4, 28396.0], [88.5, 28415.0], [88.6, 28495.0], [88.7, 28661.0], [88.8, 28693.0], [88.9, 28749.0], [89.0, 28777.0], [89.1, 28782.0], [89.2, 28880.0], [89.3, 28914.0], [89.4, 28919.0], [89.5, 28944.0], [89.6, 28945.0], [89.7, 28967.0], [89.8, 28983.0], [89.9, 28993.0], [90.0, 29078.0], [90.1, 29091.0], [90.2, 29111.0], [90.3, 29151.0], [90.4, 29152.0], [90.5, 29187.0], [90.6, 29279.0], [90.7, 29281.0], [90.8, 29291.0], [90.9, 29297.0], [91.0, 29306.0], [91.1, 29307.0], [91.2, 29318.0], [91.3, 29344.0], [91.4, 29354.0], [91.5, 29395.0], [91.6, 29441.0], [91.7, 29455.0], [91.8, 29464.0], [91.9, 29469.0], [92.0, 29477.0], [92.1, 29479.0], [92.2, 29498.0], [92.3, 29499.0], [92.4, 29502.0], [92.5, 29503.0], [92.6, 29512.0], [92.7, 29514.0], [92.8, 29523.0], [92.9, 29527.0], [93.0, 29542.0], [93.1, 29544.0], [93.2, 29560.0], [93.3, 29565.0], [93.4, 29566.0], [93.5, 29582.0], [93.6, 29583.0], [93.7, 29603.0], [93.8, 29610.0], [93.9, 29635.0], [94.0, 29687.0], [94.1, 29723.0], [94.2, 29727.0], [94.3, 29748.0], [94.4, 29750.0], [94.5, 29772.0], [94.6, 29775.0], [94.7, 29779.0], [94.8, 29822.0], [94.9, 29833.0], [95.0, 29836.0], [95.1, 29836.0], [95.2, 29855.0], [95.3, 29913.0], [95.4, 29917.0], [95.5, 29927.0], [95.6, 29935.0], [95.7, 30028.0], [95.8, 30061.0], [95.9, 30065.0], [96.0, 30077.0], [96.1, 30098.0], [96.2, 30119.0], [96.3, 30126.0], [96.4, 30148.0], [96.5, 30166.0], [96.6, 30171.0], [96.7, 30195.0], [96.8, 30216.0], [96.9, 30242.0], [97.0, 30256.0], [97.1, 30287.0], [97.2, 30287.0], [97.3, 30291.0], [97.4, 30310.0], [97.5, 30310.0], [97.6, 30337.0], [97.7, 30361.0], [97.8, 30417.0], [97.9, 30467.0], [98.0, 30501.0], [98.1, 30519.0], [98.2, 30543.0], [98.3, 30611.0], [98.4, 30641.0], [98.5, 30650.0], [98.6, 30705.0], [98.7, 30708.0], [98.8, 30738.0], [98.9, 30805.0], [99.0, 30871.0], [99.1, 30908.0], [99.2, 30941.0], [99.3, 30964.0], [99.4, 31015.0], [99.5, 31087.0], [99.6, 31114.0], [99.7, 31496.0], [99.8, 31520.0], [99.9, 31797.0]], "isOverall": false, "label": "www.4home.pl", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 13.0, "series": [{"data": [[500.0, 1.0], [700.0, 3.0], [800.0, 1.0], [900.0, 1.0], [1000.0, 2.0], [1100.0, 3.0], [1200.0, 3.0], [1300.0, 10.0], [1400.0, 2.0], [1500.0, 7.0], [1600.0, 4.0], [1700.0, 6.0], [1800.0, 5.0], [1900.0, 7.0], [2000.0, 3.0], [2100.0, 7.0], [2200.0, 3.0], [2300.0, 1.0], [2400.0, 4.0], [2500.0, 2.0], [2600.0, 1.0], [2800.0, 2.0], [2700.0, 1.0], [2900.0, 7.0], [3000.0, 4.0], [3100.0, 6.0], [3300.0, 3.0], [3200.0, 1.0], [3700.0, 1.0], [4100.0, 1.0], [4300.0, 2.0], [4600.0, 2.0], [4500.0, 5.0], [4400.0, 3.0], [4800.0, 4.0], [4700.0, 2.0], [5000.0, 3.0], [5100.0, 3.0], [4900.0, 2.0], [5300.0, 5.0], [5200.0, 9.0], [5400.0, 9.0], [5500.0, 1.0], [5600.0, 6.0], [5700.0, 6.0], [5800.0, 5.0], [5900.0, 3.0], [6100.0, 1.0], [6300.0, 1.0], [6500.0, 3.0], [6400.0, 2.0], [6600.0, 1.0], [6700.0, 3.0], [6800.0, 4.0], [6900.0, 4.0], [7100.0, 1.0], [7300.0, 3.0], [7400.0, 3.0], [7500.0, 2.0], [7600.0, 3.0], [7700.0, 1.0], [7800.0, 1.0], [7900.0, 2.0], [8000.0, 3.0], [8100.0, 1.0], [8200.0, 6.0], [8300.0, 5.0], [8400.0, 5.0], [8700.0, 1.0], [8600.0, 4.0], [8500.0, 1.0], [9100.0, 3.0], [8800.0, 5.0], [8900.0, 3.0], [9200.0, 2.0], [9000.0, 1.0], [9600.0, 5.0], [9500.0, 3.0], [9700.0, 5.0], [9300.0, 2.0], [9400.0, 2.0], [9800.0, 5.0], [10000.0, 5.0], [10100.0, 6.0], [9900.0, 7.0], [10200.0, 7.0], [10300.0, 6.0], [10400.0, 10.0], [10600.0, 3.0], [10500.0, 4.0], [10700.0, 10.0], [10800.0, 6.0], [10900.0, 4.0], [11000.0, 7.0], [11100.0, 6.0], [11200.0, 5.0], [11300.0, 4.0], [11500.0, 8.0], [11400.0, 6.0], [11700.0, 6.0], [11600.0, 3.0], [11800.0, 6.0], [12100.0, 7.0], [12200.0, 5.0], [12000.0, 4.0], [11900.0, 6.0], [12500.0, 6.0], [12700.0, 5.0], [12300.0, 10.0], [12400.0, 3.0], [12600.0, 5.0], [13200.0, 5.0], [12800.0, 1.0], [12900.0, 4.0], [13300.0, 2.0], [13400.0, 5.0], [13500.0, 4.0], [13700.0, 3.0], [13800.0, 8.0], [13600.0, 1.0], [13900.0, 7.0], [14200.0, 7.0], [14300.0, 1.0], [14600.0, 2.0], [14800.0, 1.0], [14400.0, 1.0], [14500.0, 2.0], [15000.0, 3.0], [15100.0, 4.0], [15300.0, 5.0], [14900.0, 3.0], [15200.0, 1.0], [15600.0, 8.0], [15700.0, 3.0], [15500.0, 3.0], [15800.0, 2.0], [15400.0, 1.0], [15900.0, 5.0], [16300.0, 1.0], [16000.0, 1.0], [16200.0, 3.0], [16600.0, 4.0], [17000.0, 5.0], [17200.0, 2.0], [17400.0, 2.0], [16800.0, 3.0], [18200.0, 2.0], [18000.0, 6.0], [17600.0, 3.0], [18400.0, 3.0], [17800.0, 1.0], [19000.0, 3.0], [18600.0, 1.0], [18800.0, 3.0], [19200.0, 3.0], [19400.0, 3.0], [19600.0, 5.0], [20000.0, 3.0], [20200.0, 5.0], [19800.0, 5.0], [20400.0, 7.0], [20800.0, 5.0], [20600.0, 4.0], [21000.0, 5.0], [21200.0, 3.0], [21800.0, 3.0], [21600.0, 3.0], [22000.0, 5.0], [22400.0, 2.0], [22600.0, 4.0], [22800.0, 3.0], [23200.0, 4.0], [23400.0, 1.0], [23600.0, 2.0], [24400.0, 2.0], [24000.0, 2.0], [24200.0, 3.0], [25000.0, 5.0], [24600.0, 2.0], [25400.0, 3.0], [25200.0, 2.0], [24800.0, 2.0], [26200.0, 2.0], [25800.0, 3.0], [26000.0, 3.0], [26400.0, 4.0], [26600.0, 5.0], [25600.0, 1.0], [27000.0, 4.0], [26800.0, 2.0], [27400.0, 2.0], [28200.0, 4.0], [28000.0, 4.0], [28400.0, 2.0], [27800.0, 2.0], [28600.0, 2.0], [29200.0, 4.0], [28800.0, 1.0], [29000.0, 2.0], [29400.0, 8.0], [29600.0, 4.0], [29800.0, 5.0], [30200.0, 6.0], [30000.0, 5.0], [30400.0, 2.0], [30600.0, 3.0], [31000.0, 2.0], [31400.0, 1.0], [30800.0, 2.0], [17300.0, 1.0], [16500.0, 1.0], [17100.0, 2.0], [16700.0, 3.0], [17500.0, 3.0], [17700.0, 6.0], [18100.0, 5.0], [17900.0, 4.0], [18300.0, 3.0], [18500.0, 5.0], [18700.0, 6.0], [19100.0, 4.0], [18900.0, 2.0], [19300.0, 1.0], [19500.0, 4.0], [19700.0, 7.0], [20100.0, 4.0], [19900.0, 4.0], [20300.0, 5.0], [20700.0, 7.0], [21100.0, 9.0], [20900.0, 3.0], [20500.0, 7.0], [21300.0, 3.0], [21500.0, 7.0], [21900.0, 5.0], [21700.0, 3.0], [22100.0, 4.0], [22300.0, 2.0], [22500.0, 1.0], [22700.0, 4.0], [22900.0, 3.0], [23300.0, 1.0], [23100.0, 2.0], [23900.0, 2.0], [24300.0, 3.0], [24500.0, 5.0], [23700.0, 2.0], [24100.0, 1.0], [24900.0, 2.0], [25500.0, 2.0], [25100.0, 1.0], [24700.0, 2.0], [25300.0, 1.0], [26100.0, 1.0], [26300.0, 3.0], [26500.0, 1.0], [25700.0, 1.0], [25900.0, 1.0], [27500.0, 3.0], [26900.0, 2.0], [27100.0, 1.0], [27300.0, 1.0], [27900.0, 2.0], [28300.0, 8.0], [27700.0, 1.0], [28100.0, 2.0], [29500.0, 13.0], [29100.0, 4.0], [29300.0, 6.0], [28900.0, 7.0], [28700.0, 3.0], [29700.0, 7.0], [29900.0, 4.0], [30100.0, 6.0], [30700.0, 3.0], [30300.0, 4.0], [30500.0, 3.0], [30900.0, 3.0], [31700.0, 1.0], [31100.0, 1.0], [31500.0, 1.0], [31900.0, 1.0]], "isOverall": false, "label": "www.4home.pl", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 31900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 6.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 1,000ms"], [1, "Requests having \nresponse time > 1,000ms and <= 5,000ms"], [2, "Requests having \nresponse time > 5,000ms"], [3, "Requests in error"]], "maxY": 879.0, "series": [{"data": [[0.0, 6.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 1,000ms", "isController": false}, {"data": [[1.0, 116.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 1,000ms and <= 5,000ms", "isController": false}, {"data": [[2.0, 879.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 5,000ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.621890875E12, "maxY": 896.5753424657535, "series": [{"data": [[1.621890875E12, 1.0]], "isOverall": false, "label": "4home - 1 user", "isController": false}, {"data": [[1.621890908E12, 1.5], [1.621890907E12, 40.62162162162162], [1.621890904E12, 195.99999999999997], [1.621890903E12, 231.3611111111111], [1.621890902E12, 261.87500000000006], [1.621890906E12, 119.92682926829269], [1.621890905E12, 168.95000000000002], [1.621890877E12, 536.25], [1.621890876E12, 185.60000000000002], [1.621890879E12, 849.5757575757576], [1.621890878E12, 701.7619047619049], [1.621890888E12, 776.044117647059], [1.621890887E12, 832.2352941176472], [1.621890886E12, 894.0], [1.62189089E12, 650.5128205128206], [1.621890889E12, 729.4942528735631], [1.621890882E12, 896.5753424657535], [1.621890885E12, 896.1600000000002], [1.621890884E12, 886.3478260869565], [1.621890898E12, 378.90625000000006], [1.621890897E12, 408.4444444444444], [1.621890901E12, 288.51724137931035], [1.6218909E12, 317.0689655172414], [1.621890899E12, 347.7096774193547], [1.621890893E12, 496.95454545454544], [1.621890892E12, 517.6923076923077], [1.621890891E12, 563.7173913043479], [1.621890896E12, 428.73333333333335], [1.621890895E12, 448.1304347826087], [1.621890894E12, 473.4814814814814]], "isOverall": false, "label": "4home - 1000 users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.621890908E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 542.0, "minX": 1.0, "maxY": 31797.0, "series": [{"data": [[2.0, 31520.0], [4.0, 27381.5], [5.0, 28327.0], [6.0, 28945.0], [11.0, 30650.0], [12.0, 30061.0], [13.0, 30674.5], [16.0, 30871.0], [17.0, 29753.833333333336], [18.0, 29750.0], [19.0, 28331.0], [20.0, 30501.0], [21.0, 29297.0], [22.0, 28983.0], [23.0, 30467.0], [25.0, 29532.5], [29.0, 30990.333333333332], [33.0, 29238.0], [32.0, 26912.0], [35.0, 29815.0], [36.0, 28379.0], [39.0, 30166.0], [38.0, 29576.0], [44.0, 29560.2], [47.0, 27573.0], [49.0, 30065.0], [48.0, 31797.0], [53.0, 30337.0], [52.0, 28226.0], [55.0, 28661.0], [54.0, 31496.0], [57.0, 29307.0], [56.0, 30708.0], [59.0, 28143.0], [58.0, 29913.0], [60.0, 24857.0], [62.0, 30061.0], [67.0, 26101.666666666668], [66.0, 29263.0], [71.0, 28310.0], [69.0, 30171.0], [68.0, 29152.0], [74.0, 29779.0], [72.0, 25340.5], [79.0, 28716.5], [77.0, 29635.0], [76.0, 29561.0], [86.0, 29066.666666666668], [84.0, 28989.333333333332], [91.0, 28993.0], [89.0, 28231.0], [88.0, 29190.0], [92.0, 29499.0], [98.0, 29325.0], [96.0, 29512.0], [103.0, 29565.0], [107.0, 29514.0], [106.0, 28914.0], [111.0, 26832.25], [110.0, 29962.0], [115.0, 29391.0], [114.0, 25594.333333333332], [112.0, 29477.0], [113.0, 29878.0], [119.0, 29603.0], [118.0, 24586.666666666668], [116.0, 29068.0], [122.0, 28703.0], [120.0, 30291.0], [126.0, 26749.0], [124.0, 30148.0], [135.0, 30216.0], [134.0, 30242.0], [131.0, 29395.0], [130.0, 30256.0], [129.0, 29790.0], [139.0, 542.0], [143.0, 29078.0], [142.0, 26373.0], [141.0, 18398.0], [140.0, 29885.5], [138.0, 29151.0], [137.0, 29504.75], [151.0, 27738.0], [150.0, 18363.0], [149.0, 21206.0], [148.0, 29723.0], [147.0, 21263.5], [146.0, 28995.5], [159.0, 25936.0], [158.0, 20875.5], [156.0, 29502.0], [155.0, 27455.0], [154.0, 22199.5], [152.0, 29279.0], [167.0, 25870.0], [165.0, 25567.0], [163.0, 22628.0], [161.0, 28229.0], [160.0, 28349.0], [169.0, 10337.4], [174.0, 26876.0], [173.0, 20314.0], [172.0, 28150.0], [170.0, 20458.0], [168.0, 20511.0], [183.0, 27465.0], [182.0, 20397.0], [181.0, 19774.0], [180.0, 26630.0], [179.0, 20001.0], [178.0, 22648.0], [177.0, 25765.666666666668], [188.0, 20109.0], [187.0, 26403.0], [186.0, 19922.5], [184.0, 26610.0], [198.0, 14119.0], [196.0, 997.75], [199.0, 19487.0], [197.0, 23545.5], [195.0, 16747.0], [194.0, 23663.75], [192.0, 20840.5], [207.0, 26967.0], [206.0, 26978.0], [205.0, 24781.0], [204.0, 27011.0], [203.0, 23118.0], [202.0, 27090.0], [200.0, 19470.0], [214.0, 26460.0], [211.0, 26675.0], [210.0, 21554.0], [209.0, 25614.0], [208.0, 25720.0], [222.0, 26458.0], [221.0, 26501.0], [220.0, 25367.0], [219.0, 26337.0], [218.0, 23006.0], [217.0, 23283.0], [228.0, 1162.0], [231.0, 24778.0], [230.0, 20753.0], [229.0, 23868.333333333332], [227.0, 22345.5], [224.0, 25855.0], [236.0, 23891.333333333332], [233.0, 20769.0], [232.0, 20858.0], [246.0, 20521.0], [245.0, 25812.0], [244.0, 20763.0], [242.0, 26253.0], [241.0, 26049.0], [240.0, 23123.5], [248.0, 14191.0], [251.0, 25427.0], [250.0, 20329.0], [249.0, 24298.0], [269.0, 23687.0], [268.0, 23827.0], [267.0, 23109.75], [261.0, 23501.5], [259.0, 21176.0], [258.0, 25021.0], [256.0, 23291.8], [285.0, 24062.0], [284.0, 19246.0], [283.0, 22971.0], [282.0, 24176.0], [281.0, 24586.5], [279.0, 23309.0], [278.0, 22044.0], [277.0, 25460.0], [274.0, 25464.0], [272.0, 19669.0], [295.0, 1174.0], [302.0, 19292.4], [296.0, 18544.25], [292.0, 13473.0], [291.0, 22909.0], [290.0, 20633.5], [288.0, 23416.666666666668], [318.0, 15351.0], [304.0, 11249.5], [319.0, 14176.0], [316.0, 15304.0], [315.0, 19537.0], [313.0, 17440.0], [311.0, 15268.0], [310.0, 22131.0], [308.0, 21483.5], [328.0, 22848.0], [331.0, 17661.0], [330.0, 22488.0], [329.0, 21588.0], [327.0, 22775.0], [326.0, 18439.75], [322.0, 21767.0], [321.0, 15144.0], [320.0, 21933.0], [344.0, 11170.0], [351.0, 22076.0], [350.0, 17552.714285714286], [342.0, 21583.0], [341.0, 17266.0], [340.0, 19362.0], [338.0, 21911.4], [336.0, 22112.5], [360.0, 21991.0], [366.0, 20867.0], [363.0, 21681.0], [362.0, 21682.0], [361.0, 19225.75], [359.0, 21951.0], [355.0, 21706.0], [354.0, 22030.0], [353.0, 16628.0], [381.0, 20872.666666666668], [378.0, 17300.0], [376.0, 20726.0], [375.0, 20916.6], [370.0, 20687.5], [368.0, 20357.5], [398.0, 19705.0], [399.0, 20450.0], [397.0, 20576.0], [396.0, 20326.0], [393.0, 20160.0], [392.0, 20886.0], [391.0, 20482.666666666668], [389.0, 20270.0], [388.0, 20404.8], [415.0, 19198.0], [413.0, 18780.0], [412.0, 19203.0], [409.0, 20759.0], [408.0, 20072.0], [407.0, 20559.5], [403.0, 20084.333333333332], [400.0, 19235.0], [429.0, 19010.5], [427.0, 19342.5], [425.0, 19348.5], [424.0, 19691.0], [422.0, 19836.0], [420.0, 20150.0], [419.0, 19586.0], [417.0, 19022.5], [446.0, 18409.0], [447.0, 19068.0], [445.0, 18110.0], [443.0, 18578.0], [442.0, 17851.0], [441.0, 18429.8], [436.0, 18638.0], [435.0, 18749.0], [433.0, 18818.0], [432.0, 18605.5], [462.0, 16695.0], [459.0, 16947.5], [457.0, 17907.25], [453.0, 19599.0], [452.0, 18206.5], [450.0, 17953.0], [479.0, 17154.0], [478.0, 17593.0], [474.0, 16828.75], [473.0, 18114.0], [469.0, 18123.5], [467.0, 18160.0], [466.0, 17399.666666666668], [495.0, 15115.333333333334], [494.0, 11215.0], [483.0, 17386.5], [481.0, 17116.0], [491.0, 16214.0], [490.0, 16522.0], [489.0, 17012.0], [488.0, 17025.0], [487.0, 17170.0], [486.0, 17729.0], [485.0, 17814.0], [499.0, 15899.0], [509.0, 15940.0], [508.0, 15858.0], [507.0, 15694.0], [505.0, 15642.0], [504.0, 15629.0], [503.0, 17353.0], [502.0, 16571.666666666668], [497.0, 15909.0], [496.0, 16005.0], [525.0, 1349.0], [528.0, 1542.6], [531.0, 1661.0], [526.0, 1570.5], [523.0, 1540.0], [524.0, 14506.0], [522.0, 1346.0], [521.0, 8250.0], [520.0, 13297.545454545454], [542.0, 13984.0], [513.0, 15349.0], [549.0, 14812.0], [554.0, 1457.0], [562.0, 1568.0], [559.0, 12364.0], [552.0, 14453.0], [551.0, 13367.5], [550.0, 14752.5], [548.0, 14080.666666666666], [545.0, 14711.333333333334], [546.0, 15031.5], [547.0, 12695.0], [587.0, 1854.0], [589.0, 1330.0], [588.0, 1687.1666666666665], [591.0, 9246.25], [596.0, 2029.0], [576.0, 8851.0], [590.0, 8832.0], [617.0, 1793.75], [623.0, 1380.0], [637.0, 12350.0], [628.0, 13792.0], [629.0, 11561.142857142857], [611.0, 13952.0], [616.0, 13381.2], [653.0, 11180.166666666668], [649.0, 9246.5], [648.0, 3183.25], [655.0, 6946.5], [640.0, 13593.0], [651.0, 1817.0], [652.0, 12957.0], [643.0, 12407.0], [644.0, 8376.0], [665.0, 12439.5], [664.0, 11559.0], [661.0, 12254.5], [656.0, 12814.0], [657.0, 10430.0], [670.0, 12075.0], [654.0, 11064.333333333334], [676.0, 11085.0], [689.0, 12235.0], [696.0, 12350.5], [698.0, 13874.0], [694.0, 10167.0], [683.0, 11342.0], [672.0, 10732.0], [681.0, 11908.333333333334], [673.0, 10351.0], [687.0, 10716.0], [684.0, 10257.0], [685.0, 10241.0], [728.0, 12359.0], [730.0, 1938.0], [731.0, 7164.0], [729.0, 10782.333333333334], [724.0, 10321.666666666666], [735.0, 12367.0], [716.0, 10093.0], [713.0, 11265.0], [708.0, 12093.0], [705.0, 10059.5], [767.0, 10361.0], [745.0, 2371.75], [747.0, 7226.5], [757.0, 7104.5], [759.0, 2244.0], [753.0, 10725.0], [752.0, 9919.0], [754.0, 11151.833333333334], [748.0, 12357.0], [749.0, 12301.0], [750.0, 11491.0], [751.0, 10733.0], [758.0, 10841.36842105263], [740.0, 10831.333333333334], [742.0, 13550.0], [762.0, 10451.0], [743.0, 10095.0], [766.0, 10824.0], [765.0, 10006.75], [738.0, 12377.5], [769.0, 11502.0], [795.0, 8494.0], [771.0, 6426.0], [770.0, 9937.0], [772.0, 11427.0], [791.0, 9690.333333333334], [782.0, 10318.590909090908], [780.0, 10536.0], [768.0, 11413.5], [776.0, 10845.714285714286], [784.0, 10820.0], [797.0, 10846.0], [808.0, 2317.3333333333335], [809.0, 2737.4], [817.0, 2856.0], [802.0, 9284.666666666666], [819.0, 10617.0], [813.0, 10766.0], [843.0, 3717.0], [837.0, 10123.6], [856.0, 10409.0], [836.0, 10410.0], [834.0, 9589.0], [890.0, 5381.333333333333], [875.0, 4360.5], [874.0, 3065.529411764706], [880.0, 4687.0], [891.0, 5235.666666666667], [892.0, 5348.666666666667], [893.0, 7067.75], [894.0, 7397.0], [895.0, 6209.5], [881.0, 4979.5], [882.0, 6074.333333333333], [883.0, 6202.5], [884.0, 6885.8], [885.0, 7215.0], [886.0, 6316.0], [888.0, 5447.0], [878.0, 7593.0], [889.0, 5185.333333333333], [887.0, 6501.333333333333], [898.0, 6190.857142857143], [897.0, 5500.8], [900.0, 5484.0], [901.0, 5211.25], [896.0, 7689.454545454544], [902.0, 6948.0], [906.0, 5775.374999999999], [899.0, 6783.0], [905.0, 5808.0], [1.0, 16322.5]], "isOverall": false, "label": "www.4home.pl", "isController": false}, {"data": [[491.33666333666315, 15801.776223776225]], "isOverall": false, "label": "www.4home.pl-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 906.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 420.0, "minX": 1.621890875E12, "maxY": 8716195.0, "series": [{"data": [[1.621890908E12, 200202.0], [1.621890907E12, 7415125.0], [1.621890904E12, 3406904.0], [1.621890903E12, 3605757.0], [1.621890902E12, 2404870.0], [1.621890906E12, 8218164.0], [1.621890905E12, 2004287.0], [1.621890877E12, 3607114.0], [1.621890876E12, 1002247.0], [1.621890875E12, 100240.0], [1.621890879E12, 3305825.0], [1.621890878E12, 2104606.0], [1.621890888E12, 6813897.0], [1.621890887E12, 1703518.0], [1.621890886E12, 200165.0], [1.62189089E12, 3907710.0], [1.621890889E12, 8716195.0], [1.621890882E12, 7314966.0], [1.621890885E12, 2505183.0], [1.621890884E12, 2304756.0], [1.621890898E12, 3207418.0], [1.621890897E12, 2705506.0], [1.621890901E12, 2905621.0], [1.6218909E12, 2904241.0], [1.621890899E12, 3106261.0], [1.621890893E12, 2204017.0], [1.621890892E12, 1302885.0], [1.621890891E12, 4609255.0], [1.621890896E12, 1502901.0], [1.621890895E12, 2303995.0], [1.621890894E12, 2707067.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.621890908E12, 840.0], [1.621890907E12, 31080.0], [1.621890904E12, 14280.0], [1.621890903E12, 15120.0], [1.621890902E12, 10080.0], [1.621890906E12, 34440.0], [1.621890905E12, 8400.0], [1.621890877E12, 15120.0], [1.621890876E12, 4200.0], [1.621890875E12, 420.0], [1.621890879E12, 13860.0], [1.621890878E12, 8820.0], [1.621890888E12, 28560.0], [1.621890887E12, 7140.0], [1.621890886E12, 840.0], [1.62189089E12, 16380.0], [1.621890889E12, 36540.0], [1.621890882E12, 30660.0], [1.621890885E12, 10500.0], [1.621890884E12, 9660.0], [1.621890898E12, 13440.0], [1.621890897E12, 11340.0], [1.621890901E12, 12180.0], [1.6218909E12, 12180.0], [1.621890899E12, 13020.0], [1.621890893E12, 9240.0], [1.621890892E12, 5460.0], [1.621890891E12, 19320.0], [1.621890896E12, 6300.0], [1.621890895E12, 9660.0], [1.621890894E12, 11340.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.621890908E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 896.9000000000001, "minX": 1.621890875E12, "maxY": 31230.5, "series": [{"data": [[1.621890908E12, 31230.5], [1.621890907E12, 29102.75675675675], [1.621890904E12, 23486.882352941175], [1.621890903E12, 23446.555555555555], [1.621890902E12, 22812.625], [1.621890906E12, 27846.987804878056], [1.621890905E12, 24936.299999999996], [1.621890877E12, 1583.6944444444441], [1.621890876E12, 896.9000000000001], [1.621890875E12, 1704.0], [1.621890879E12, 2890.727272727272], [1.621890878E12, 2043.7142857142858], [1.621890888E12, 10499.441176470595], [1.621890887E12, 10103.647058823532], [1.621890886E12, 9414.5], [1.62189089E12, 11752.948717948717], [1.621890889E12, 11215.701149425286], [1.621890882E12, 5354.164383561644], [1.621890885E12, 7797.919999999998], [1.621890884E12, 6917.739130434782], [1.621890898E12, 20488.71875], [1.621890897E12, 19916.185185185186], [1.621890901E12, 21546.1724137931], [1.6218909E12, 19314.310344827587], [1.621890899E12, 19771.83870967742], [1.621890893E12, 15985.090909090908], [1.621890892E12, 14777.461538461539], [1.621890891E12, 13663.065217391304], [1.621890896E12, 19134.86666666667], [1.621890895E12, 18254.608695652172], [1.621890894E12, 17377.518518518515]], "isOverall": false, "label": "www.4home.pl", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.621890908E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 785.8000000000001, "minX": 1.621890875E12, "maxY": 31187.5, "series": [{"data": [[1.621890908E12, 31187.5], [1.621890907E12, 28930.756756756753], [1.621890904E12, 23385.676470588238], [1.621890903E12, 23326.66666666667], [1.621890902E12, 22656.416666666668], [1.621890906E12, 27635.902439024394], [1.621890905E12, 24778.45], [1.621890877E12, 1341.9444444444443], [1.621890876E12, 785.8000000000001], [1.621890875E12, 1681.0], [1.621890879E12, 2447.6666666666665], [1.621890878E12, 1787.5714285714287], [1.621890888E12, 9118.808823529409], [1.621890887E12, 8112.058823529411], [1.621890886E12, 7726.0], [1.62189089E12, 11039.051282051283], [1.621890889E12, 9804.873563218393], [1.621890882E12, 5189.054794520548], [1.621890885E12, 7004.359999999999], [1.621890884E12, 5483.478260869565], [1.621890898E12, 20365.093750000004], [1.621890897E12, 19839.55555555556], [1.621890901E12, 21377.68965517241], [1.6218909E12, 19224.689655172413], [1.621890899E12, 19653.000000000004], [1.621890893E12, 15851.045454545454], [1.621890892E12, 14132.769230769232], [1.621890891E12, 13473.652173913038], [1.621890896E12, 19018.8], [1.621890895E12, 18128.47826086957], [1.621890894E12, 17106.37037037037]], "isOverall": false, "label": "www.4home.pl", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.621890908E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 248.18181818181816, "minX": 1.621890875E12, "maxY": 13924.130434782608, "series": [{"data": [[1.621890908E12, 607.0], [1.621890907E12, 5833.0135135135115], [1.621890904E12, 9498.235294117647], [1.621890903E12, 11785.63888888889], [1.621890902E12, 11901.708333333332], [1.621890906E12, 10745.20731707317], [1.621890905E12, 11534.650000000001], [1.621890877E12, 491.6388888888889], [1.621890876E12, 429.7], [1.621890875E12, 1403.0], [1.621890879E12, 248.18181818181816], [1.621890878E12, 278.8571428571429], [1.621890888E12, 1418.3382352941182], [1.621890887E12, 1431.0588235294117], [1.621890886E12, 2252.0], [1.62189089E12, 2245.538461538462], [1.621890889E12, 1042.8045977011495], [1.621890882E12, 634.5342465753423], [1.621890885E12, 1302.8400000000001], [1.621890884E12, 754.608695652174], [1.621890898E12, 10530.343750000002], [1.621890897E12, 9306.88888888889], [1.621890901E12, 12018.48275862069], [1.6218909E12, 11014.72413793103], [1.621890899E12, 11187.064516129034], [1.621890893E12, 10110.590909090908], [1.621890892E12, 9127.0], [1.621890891E12, 4093.8695652173933], [1.621890896E12, 11930.866666666667], [1.621890895E12, 13924.130434782608], [1.621890894E12, 10821.518518518518]], "isOverall": false, "label": "www.4home.pl", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.621890908E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 542.0, "minX": 1.621890875E12, "maxY": 31909.0, "series": [{"data": [[1.621890908E12, 31520.0], [1.621890907E12, 31909.0], [1.621890904E12, 27530.0], [1.621890903E12, 27549.0], [1.621890902E12, 26269.0], [1.621890906E12, 31015.0], [1.621890905E12, 28495.0], [1.621890877E12, 2173.0], [1.621890876E12, 1162.0], [1.621890875E12, 1704.0], [1.621890879E12, 3717.0], [1.621890878E12, 2878.0], [1.621890888E12, 12550.0], [1.621890887E12, 11890.0], [1.621890886E12, 9662.0], [1.62189089E12, 13745.0], [1.621890889E12, 13874.0], [1.621890882E12, 6948.0], [1.621890885E12, 8897.0], [1.621890884E12, 7833.0], [1.621890898E12, 21880.0], [1.621890897E12, 20835.0], [1.621890901E12, 25464.0], [1.6218909E12, 24417.0], [1.621890899E12, 22707.0], [1.621890893E12, 17729.0], [1.621890892E12, 15940.0], [1.621890891E12, 15768.0], [1.621890896E12, 21186.0], [1.621890895E12, 19599.0], [1.621890894E12, 18160.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.621890908E12, 31520.0], [1.621890907E12, 30838.0], [1.621890904E12, 27096.5], [1.621890903E12, 26559.2], [1.621890902E12, 25471.5], [1.621890906E12, 30139.3], [1.621890905E12, 28337.0], [1.621890877E12, 2003.8000000000002], [1.621890876E12, 1159.3], [1.621890875E12, 1704.0], [1.621890879E12, 3331.0], [1.621890878E12, 2631.0], [1.621890888E12, 11689.8], [1.621890887E12, 10993.199999999999], [1.621890886E12, 9662.0], [1.62189089E12, 13296.0], [1.621890889E12, 12658.6], [1.621890882E12, 6308.400000000005], [1.621890885E12, 8508.800000000001], [1.621890884E12, 7715.6], [1.621890898E12, 21646.8], [1.621890897E12, 20712.6], [1.621890901E12, 25003.0], [1.6218909E12, 23986.0], [1.621890899E12, 22515.0], [1.621890893E12, 17298.1], [1.621890892E12, 15907.2], [1.621890891E12, 15570.300000000001], [1.621890896E12, 20505.600000000002], [1.621890895E12, 19046.8], [1.621890894E12, 18118.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.621890908E12, 31520.0], [1.621890907E12, 31909.0], [1.621890904E12, 27530.0], [1.621890903E12, 27549.0], [1.621890902E12, 26269.0], [1.621890906E12, 31015.0], [1.621890905E12, 28495.0], [1.621890877E12, 2173.0], [1.621890876E12, 1162.0], [1.621890875E12, 1704.0], [1.621890879E12, 3717.0], [1.621890878E12, 2878.0], [1.621890888E12, 12550.0], [1.621890887E12, 11890.0], [1.621890886E12, 9662.0], [1.62189089E12, 13745.0], [1.621890889E12, 13874.0], [1.621890882E12, 6948.0], [1.621890885E12, 8897.0], [1.621890884E12, 7833.0], [1.621890898E12, 21880.0], [1.621890897E12, 20835.0], [1.621890901E12, 25464.0], [1.6218909E12, 24417.0], [1.621890899E12, 22707.0], [1.621890893E12, 17729.0], [1.621890892E12, 15940.0], [1.621890891E12, 15768.0], [1.621890896E12, 21186.0], [1.621890895E12, 19599.0], [1.621890894E12, 18160.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.621890908E12, 31520.0], [1.621890907E12, 31209.5], [1.621890904E12, 27481.25], [1.621890903E12, 27533.7], [1.621890902E12, 26080.75], [1.621890906E12, 30282.35], [1.621890905E12, 28487.7], [1.621890877E12, 2160.25], [1.621890876E12, 1162.0], [1.621890875E12, 1704.0], [1.621890879E12, 3451.699999999999], [1.621890878E12, 2857.1], [1.621890888E12, 11766.6], [1.621890887E12, 11890.0], [1.621890886E12, 9662.0], [1.62189089E12, 13653.0], [1.621890889E12, 13206.199999999995], [1.621890882E12, 6800.099999999999], [1.621890885E12, 8817.8], [1.621890884E12, 7815.2], [1.621890898E12, 21751.3], [1.621890897E12, 20804.6], [1.621890901E12, 25462.0], [1.6218909E12, 24367.5], [1.621890899E12, 22701.6], [1.621890893E12, 17672.6], [1.621890892E12, 15940.0], [1.621890891E12, 15689.95], [1.621890896E12, 21186.0], [1.621890895E12, 19492.8], [1.621890894E12, 18150.4]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.621890908E12, 30941.0], [1.621890907E12, 19854.0], [1.621890904E12, 16747.0], [1.621890903E12, 15486.0], [1.621890902E12, 14261.0], [1.621890906E12, 18363.0], [1.621890905E12, 17904.0], [1.621890877E12, 1174.0], [1.621890876E12, 542.0], [1.621890875E12, 1704.0], [1.621890879E12, 2109.0], [1.621890878E12, 1644.0], [1.621890888E12, 8477.0], [1.621890887E12, 8326.0], [1.621890886E12, 9167.0], [1.62189089E12, 8235.0], [1.621890889E12, 9611.0], [1.621890882E12, 4183.0], [1.621890885E12, 5778.0], [1.621890884E12, 5607.0], [1.621890898E12, 13345.0], [1.621890897E12, 18375.0], [1.621890901E12, 13403.0], [1.6218909E12, 12405.0], [1.621890899E12, 11427.0], [1.621890893E12, 11215.0], [1.621890892E12, 10049.0], [1.621890891E12, 8832.0], [1.621890896E12, 17511.0], [1.621890895E12, 16874.0], [1.621890894E12, 15968.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.621890908E12, 31230.5], [1.621890907E12, 29845.5], [1.621890904E12, 25319.0], [1.621890903E12, 24872.0], [1.621890902E12, 23872.5], [1.621890906E12, 29331.0], [1.621890905E12, 26406.0], [1.621890877E12, 1553.0], [1.621890876E12, 902.5], [1.621890875E12, 1704.0], [1.621890879E12, 2979.0], [1.621890878E12, 1955.0], [1.621890888E12, 10858.0], [1.621890887E12, 10427.0], [1.621890886E12, 9414.5], [1.62189089E12, 12067.0], [1.621890889E12, 10825.0], [1.621890882E12, 5313.0], [1.621890885E12, 8078.0], [1.621890884E12, 6980.0], [1.621890898E12, 20516.0], [1.621890897E12, 19869.0], [1.621890901E12, 22909.0], [1.6218909E12, 21588.0], [1.621890899E12, 21551.0], [1.621890893E12, 16108.5], [1.621890892E12, 15101.0], [1.621890891E12, 13927.0], [1.621890896E12, 19114.0], [1.621890895E12, 18201.0], [1.621890894E12, 17568.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.621890908E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 902.5, "minX": 1.0, "maxY": 29845.5, "series": [{"data": [[33.0, 2979.0], [2.0, 20301.5], [32.0, 20516.0], [34.0, 25319.0], [36.0, 8829.5], [39.0, 12067.0], [46.0, 13927.0], [68.0, 10858.0], [73.0, 5313.0], [74.0, 29845.5], [82.0, 29331.0], [87.0, 10825.0], [10.0, 902.5], [13.0, 15101.0], [15.0, 19114.0], [1.0, 1704.0], [17.0, 10427.0], [20.0, 26406.0], [21.0, 1955.0], [22.0, 16108.5], [23.0, 12353.5], [24.0, 23872.5], [25.0, 8078.0], [27.0, 18267.5], [29.0, 22427.0], [31.0, 21551.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 87.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 764.0, "minX": 1.0, "maxY": 29598.0, "series": [{"data": [[33.0, 2368.0], [2.0, 19474.0], [32.0, 20402.0], [34.0, 25251.0], [36.0, 8727.0], [39.0, 11710.0], [46.0, 13857.0], [68.0, 8764.0], [73.0, 5250.0], [74.0, 29598.0], [82.0, 29052.0], [87.0, 9799.0], [10.0, 764.0], [13.0, 14527.0], [15.0, 18875.0], [1.0, 1681.0], [17.0, 8317.0], [20.0, 26308.5], [21.0, 1760.0], [22.0, 15889.0], [23.0, 12286.5], [24.0, 23740.5], [25.0, 7414.0], [27.0, 18238.0], [29.0, 22326.5], [31.0, 21440.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 87.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.621890873E12, "maxY": 403.0, "series": [{"data": [[1.621890877E12, 403.0], [1.621890888E12, 1.0], [1.621890887E12, 23.0], [1.621890876E12, 155.0], [1.621890875E12, 74.0], [1.62189088E12, 1.0], [1.621890879E12, 76.0], [1.621890878E12, 184.0], [1.621890882E12, 46.0], [1.621890885E12, 15.0], [1.621890873E12, 1.0], [1.621890884E12, 22.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.621890888E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.621890875E12, "maxY": 87.0, "series": [{"data": [[1.621890908E12, 2.0], [1.621890907E12, 74.0], [1.621890904E12, 34.0], [1.621890903E12, 36.0], [1.621890902E12, 24.0], [1.621890906E12, 82.0], [1.621890905E12, 20.0], [1.621890877E12, 36.0], [1.621890876E12, 10.0], [1.621890875E12, 1.0], [1.621890879E12, 33.0], [1.621890878E12, 21.0], [1.621890888E12, 68.0], [1.621890887E12, 17.0], [1.621890886E12, 2.0], [1.62189089E12, 39.0], [1.621890889E12, 87.0], [1.621890882E12, 73.0], [1.621890885E12, 25.0], [1.621890884E12, 23.0], [1.621890898E12, 32.0], [1.621890897E12, 27.0], [1.621890901E12, 29.0], [1.6218909E12, 29.0], [1.621890899E12, 31.0], [1.621890893E12, 22.0], [1.621890892E12, 13.0], [1.621890891E12, 46.0], [1.621890896E12, 15.0], [1.621890895E12, 23.0], [1.621890894E12, 27.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.621890908E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.621890875E12, "maxY": 87.0, "series": [{"data": [[1.621890908E12, 2.0], [1.621890907E12, 74.0], [1.621890904E12, 34.0], [1.621890903E12, 36.0], [1.621890902E12, 24.0], [1.621890906E12, 82.0], [1.621890905E12, 20.0], [1.621890877E12, 36.0], [1.621890876E12, 10.0], [1.621890875E12, 1.0], [1.621890879E12, 33.0], [1.621890878E12, 21.0], [1.621890888E12, 68.0], [1.621890887E12, 17.0], [1.621890886E12, 2.0], [1.62189089E12, 39.0], [1.621890889E12, 87.0], [1.621890882E12, 73.0], [1.621890885E12, 25.0], [1.621890884E12, 23.0], [1.621890898E12, 32.0], [1.621890897E12, 27.0], [1.621890901E12, 29.0], [1.6218909E12, 29.0], [1.621890899E12, 31.0], [1.621890893E12, 22.0], [1.621890892E12, 13.0], [1.621890891E12, 46.0], [1.621890896E12, 15.0], [1.621890895E12, 23.0], [1.621890894E12, 27.0]], "isOverall": false, "label": "www.4home.pl-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.621890908E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.621890875E12, "maxY": 87.0, "series": [{"data": [[1.621890908E12, 2.0], [1.621890907E12, 74.0], [1.621890904E12, 34.0], [1.621890903E12, 36.0], [1.621890902E12, 24.0], [1.621890906E12, 82.0], [1.621890905E12, 20.0], [1.621890877E12, 36.0], [1.621890876E12, 10.0], [1.621890875E12, 1.0], [1.621890879E12, 33.0], [1.621890878E12, 21.0], [1.621890888E12, 68.0], [1.621890887E12, 17.0], [1.621890886E12, 2.0], [1.62189089E12, 39.0], [1.621890889E12, 87.0], [1.621890882E12, 73.0], [1.621890885E12, 25.0], [1.621890884E12, 23.0], [1.621890898E12, 32.0], [1.621890897E12, 27.0], [1.621890901E12, 29.0], [1.6218909E12, 29.0], [1.621890899E12, 31.0], [1.621890893E12, 22.0], [1.621890892E12, 13.0], [1.621890891E12, 46.0], [1.621890896E12, 15.0], [1.621890895E12, 23.0], [1.621890894E12, 27.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.621890908E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

